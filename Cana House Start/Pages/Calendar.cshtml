@page
@model Cana_House_Start.Pages.CalendarModel
@{
    ViewData["Title"] = "Events Calendar";
    var getDate = DateTime.Now;
    var firstDayOfTheMonth = new DateTime(getDate.Year, getDate.Month, 1);
    var lastDayOfTheMonth = firstDayOfTheMonth.AddMonths(1).AddDays(-1);
    var numberOfDays = lastDayOfTheMonth.Day;
    var startDate = firstDayOfTheMonth;
    var firstDayOfWeek = (int)startDate.DayOfWeek;
}

<head>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600&family=Comfortaa:wght@300;400&display=swap" rel="stylesheet">
    <style>
        body {
            background-color: #6c85a3;
            color: #2C2C2C;
            font-family: 'Playfair Display', serif;
            margin: 0;
            padding: 0;
            display: flex;
            height: 100vh;
            flex-direction: column;
        }

        .container1 {
            width: 100%;
            max-width: 100%;
            margin: auto;
            padding: 20px;
            background-color: #F5F1E3;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .container2 {
            width: 90%;
            max-width: 1200px;
            background-color: #F5F1E3;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            padding: 20px;
            margin: auto;
            text-align: center;
        }

        h1 {
            font-family: 'Playfair Display', serif;
            color: #800020;
            font-size: 45px;
            text-align: center;
        }

        p {
            font-family: 'Playfair Display', serif;
            color: #800020;
            font-size: 30px;
        }

        .calendar-container {
            display: flex;
            justify-content: center;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
        }

        th, td {
            width: 14.28%;
            border: 1px solid #800020;
            text-align: center;
            padding: 15px;
            font-size: 18px;
            position: relative;
        }

        th {
            background-color: #800020;
            color: white;
            font-weight: bold;
        }

        td.current {
            background-color: yellow;
            font-weight: bold;
        }

        td.event {
            background-color: lightgreen !important;
            font-weight: bold;
            cursor: pointer;
        }

        td.event:hover::after {
            content: attr(data-event);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: black;
            color: white;
            padding: 5px;
            font-size: 14px;
            white-space: nowrap;
            border-radius: 5px;
            box-shadow: 0px 4px 6px rgba(0,0,0,0.2);
        }

        td.empty {
            background-color: #ddd;
        }
    </style>
</head>

<body>
    <div class="container1">
        <h1>@getDate.ToString("MMMM yyyy")</h1> 
        <div class="container2">
            <div class="calendar-container">
                <table>
                    <thead>
                        <tr>
                            <th>Sunday</th>
                            <th>Monday</th>
                            <th>Tuesday</th>
                            <th>Wednesday</th>
                            <th>Thursday</th>
                            <th>Friday</th>
                            <th>Saturday</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            @for (int i = 0; i < firstDayOfWeek; i++)
                            {
                                <td class="empty"></td> 
                            }

                            @for (int day = 1; day <= numberOfDays; day++)
                            {
                                var date = new DateTime(getDate.Year, getDate.Month, day);
                                var eventOnDate = Model.Event.FirstOrDefault(e => e.Date == DateOnly.FromDateTime(date));
                                bool hasEvent = eventOnDate != null;

                                if ((firstDayOfWeek + day - 1) % 7 == 0 && day > 1)
                                {
                                    @:</tr><tr> 
                                }

                                if (date.Month == getDate.Month && date.Day == getDate.Day)
                                {
                                    <td class="current">@date.Day</td> 
                                }
                                else if (hasEvent)
                                {
                                    <td class="event" data-event="@eventOnDate.Title">@date.Day</td> 
                                }
                                else
                                {
                                    <td>@date.Day</td>
                                }
                            }
                        </tr>
                    </tbody>
                    <p>Upcoming Events are labeled in Green</p>
                </table>
            </div>
        </div>
    </div>
</body>
